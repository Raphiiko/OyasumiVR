// @generated by protobuf-ts 2.9.6 with parameter add_pb_suffix,force_server_none
// @generated from protobuf file "elevated-sidecar.proto" (package "OyasumiElevatedSidecar", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { OyasumiElevatedSidecar } from './elevated-sidecar_pb';
import type { SetMsiAfterburnerProfileResponse } from './elevated-sidecar_pb';
import type { SetMsiAfterburnerProfileRequest } from './elevated-sidecar_pb';
import type { NvmlPowerManagementLimitResponse } from './elevated-sidecar_pb';
import type { NvmlPowerManagementLimitRequest } from './elevated-sidecar_pb';
import type { NvmlDevicesResponse } from './elevated-sidecar_pb';
import type { NvmlStatusResponse } from './elevated-sidecar_pb';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { PingResponse } from './elevated-sidecar_pb';
import type { Empty } from './elevated-sidecar_pb';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
// Services

/**
 * @generated from protobuf service OyasumiElevatedSidecar.OyasumiElevatedSidecar
 */
export interface IOyasumiElevatedSidecarClient {
  /**
   * @generated from protobuf rpc: Ping(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.PingResponse);
   */
  ping(input: Empty, options?: RpcOptions): UnaryCall<Empty, PingResponse>;
  /**
   * @generated from protobuf rpc: RequestStop(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.Empty);
   */
  requestStop(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
  /**
   * @generated from protobuf rpc: GetNvmlStatus(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.NvmlStatusResponse);
   */
  getNvmlStatus(input: Empty, options?: RpcOptions): UnaryCall<Empty, NvmlStatusResponse>;
  /**
   * @generated from protobuf rpc: GetNvmlDevices(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.NvmlDevicesResponse);
   */
  getNvmlDevices(input: Empty, options?: RpcOptions): UnaryCall<Empty, NvmlDevicesResponse>;
  /**
   * @generated from protobuf rpc: SetNvmlPowerManagementLimit(OyasumiElevatedSidecar.NvmlPowerManagementLimitRequest) returns (OyasumiElevatedSidecar.NvmlPowerManagementLimitResponse);
   */
  setNvmlPowerManagementLimit(
    input: NvmlPowerManagementLimitRequest,
    options?: RpcOptions
  ): UnaryCall<NvmlPowerManagementLimitRequest, NvmlPowerManagementLimitResponse>;
  /**
   * @generated from protobuf rpc: SetMsiAfterburnerProfile(OyasumiElevatedSidecar.SetMsiAfterburnerProfileRequest) returns (OyasumiElevatedSidecar.SetMsiAfterburnerProfileResponse);
   */
  setMsiAfterburnerProfile(
    input: SetMsiAfterburnerProfileRequest,
    options?: RpcOptions
  ): UnaryCall<SetMsiAfterburnerProfileRequest, SetMsiAfterburnerProfileResponse>;
}
// Services

/**
 * @generated from protobuf service OyasumiElevatedSidecar.OyasumiElevatedSidecar
 */
export class OyasumiElevatedSidecarClient implements IOyasumiElevatedSidecarClient, ServiceInfo {
  typeName = OyasumiElevatedSidecar.typeName;
  methods = OyasumiElevatedSidecar.methods;
  options = OyasumiElevatedSidecar.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: Ping(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.PingResponse);
   */
  ping(input: Empty, options?: RpcOptions): UnaryCall<Empty, PingResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Empty, PingResponse>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: RequestStop(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.Empty);
   */
  requestStop(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Empty, Empty>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: GetNvmlStatus(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.NvmlStatusResponse);
   */
  getNvmlStatus(input: Empty, options?: RpcOptions): UnaryCall<Empty, NvmlStatusResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Empty, NvmlStatusResponse>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: GetNvmlDevices(OyasumiElevatedSidecar.Empty) returns (OyasumiElevatedSidecar.NvmlDevicesResponse);
   */
  getNvmlDevices(input: Empty, options?: RpcOptions): UnaryCall<Empty, NvmlDevicesResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Empty, NvmlDevicesResponse>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: SetNvmlPowerManagementLimit(OyasumiElevatedSidecar.NvmlPowerManagementLimitRequest) returns (OyasumiElevatedSidecar.NvmlPowerManagementLimitResponse);
   */
  setNvmlPowerManagementLimit(
    input: NvmlPowerManagementLimitRequest,
    options?: RpcOptions
  ): UnaryCall<NvmlPowerManagementLimitRequest, NvmlPowerManagementLimitResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<NvmlPowerManagementLimitRequest, NvmlPowerManagementLimitResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: SetMsiAfterburnerProfile(OyasumiElevatedSidecar.SetMsiAfterburnerProfileRequest) returns (OyasumiElevatedSidecar.SetMsiAfterburnerProfileResponse);
   */
  setMsiAfterburnerProfile(
    input: SetMsiAfterburnerProfileRequest,
    options?: RpcOptions
  ): UnaryCall<SetMsiAfterburnerProfileRequest, SetMsiAfterburnerProfileResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SetMsiAfterburnerProfileRequest, SetMsiAfterburnerProfileResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
}
