// @generated by protobuf-ts 2.9.0 with parameter add_pb_suffix,force_server_none
// @generated from protobuf file "oyasumi-core.proto" (package "OyasumiCore", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message OyasumiCore.HTTPServerPort
 */
export interface HTTPServerPort {
  /**
   * @generated from protobuf field: uint32 port = 1;
   */
  port: number;
}
/**
 * @generated from protobuf message OyasumiCore.OverlaySidecarStartArgs
 */
export interface OverlaySidecarStartArgs {
  /**
   * @generated from protobuf field: uint32 pid = 1;
   */
  pid: number;
  /**
   * @generated from protobuf field: uint32 grpc_port = 2;
   */
  grpcPort: number;
  /**
   * @generated from protobuf field: uint32 grpc_web_port = 3;
   */
  grpcWebPort: number;
}
/**
 * @generated from protobuf message OyasumiCore.ElevatedSidecarStartArgs
 */
export interface ElevatedSidecarStartArgs {
  /**
   * @generated from protobuf field: uint32 pid = 1;
   */
  pid: number;
  /**
   * @generated from protobuf field: uint32 grpc_port = 2;
   */
  grpcPort: number;
  /**
   * @generated from protobuf field: uint32 grpc_web_port = 3;
   */
  grpcWebPort: number;
  /**
   * Set to the pid of the previous process in case the sidecar relaunched itself
   *
   * @generated from protobuf field: optional uint32 old_pid = 4;
   */
  oldPid?: number;
}
/**
 * @generated from protobuf message OyasumiCore.MDNSSidecarStartArgs
 */
export interface MDNSSidecarStartArgs {
  /**
   * @generated from protobuf field: uint32 pid = 1;
   */
  pid: number;
}
/**
 * @generated from protobuf message OyasumiCore.EventParams
 */
export interface EventParams {
  /**
   * @generated from protobuf field: string event_name = 1;
   */
  eventName: string;
  /**
   * @generated from protobuf oneof: event_data
   */
  eventData:
    | {
        oneofKind: 'stringData';
        /**
         * @generated from protobuf field: string string_data = 2;
         */
        stringData: string;
      }
    | {
        oneofKind: 'boolData';
        /**
         * @generated from protobuf field: bool bool_data = 3;
         */
        boolData: boolean;
      }
    | {
        oneofKind: 'jsonData';
        /**
         * @generated from protobuf field: string json_data = 4;
         */
        jsonData: string;
      }
    | {
        oneofKind: 'intData';
        /**
         * @generated from protobuf field: int32 int_data = 5;
         */
        intData: number;
      }
    | {
        oneofKind: 'doubleData';
        /**
         * @generated from protobuf field: double double_data = 6;
         */
        doubleData: number;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message OyasumiCore.AddNotificationRequest
 */
export interface AddNotificationRequest {
  /**
   * @generated from protobuf field: string message = 1;
   */
  message: string;
  /**
   * @generated from protobuf field: uint32 duration = 2;
   */
  duration: number;
}
/**
 * @generated from protobuf message OyasumiCore.AddNotificationResponse
 */
export interface AddNotificationResponse {
  /**
   * @generated from protobuf field: optional string notification_id = 1;
   */
  notificationId?: string;
}
/**
 * @generated from protobuf message OyasumiCore.SetAddressRequest
 */
export interface SetAddressRequest {
  /**
   * @generated from protobuf field: string host = 1;
   */
  host: string;
  /**
   * @generated from protobuf field: uint32 port = 2;
   */
  port: number;
}
/**
 * @generated from protobuf message OyasumiCore.Empty
 */
export interface Empty {}
// @generated message type with reflection information, may provide speed optimized methods
class HTTPServerPort$Type extends MessageType<HTTPServerPort> {
  constructor() {
    super('OyasumiCore.HTTPServerPort', [
      { no: 1, name: 'port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<HTTPServerPort>): HTTPServerPort {
    const message = { port: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<HTTPServerPort>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: HTTPServerPort
  ): HTTPServerPort {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 port */ 1:
          message.port = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: HTTPServerPort,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 port = 1; */
    if (message.port !== 0) writer.tag(1, WireType.Varint).uint32(message.port);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.HTTPServerPort
 */
export const HTTPServerPort = new HTTPServerPort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverlaySidecarStartArgs$Type extends MessageType<OverlaySidecarStartArgs> {
  constructor() {
    super('OyasumiCore.OverlaySidecarStartArgs', [
      { no: 1, name: 'pid', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: 'grpc_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 3, name: 'grpc_web_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<OverlaySidecarStartArgs>): OverlaySidecarStartArgs {
    const message = { pid: 0, grpcPort: 0, grpcWebPort: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<OverlaySidecarStartArgs>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OverlaySidecarStartArgs
  ): OverlaySidecarStartArgs {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 pid */ 1:
          message.pid = reader.uint32();
          break;
        case /* uint32 grpc_port */ 2:
          message.grpcPort = reader.uint32();
          break;
        case /* uint32 grpc_web_port */ 3:
          message.grpcWebPort = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OverlaySidecarStartArgs,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 pid = 1; */
    if (message.pid !== 0) writer.tag(1, WireType.Varint).uint32(message.pid);
    /* uint32 grpc_port = 2; */
    if (message.grpcPort !== 0) writer.tag(2, WireType.Varint).uint32(message.grpcPort);
    /* uint32 grpc_web_port = 3; */
    if (message.grpcWebPort !== 0) writer.tag(3, WireType.Varint).uint32(message.grpcWebPort);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.OverlaySidecarStartArgs
 */
export const OverlaySidecarStartArgs = new OverlaySidecarStartArgs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElevatedSidecarStartArgs$Type extends MessageType<ElevatedSidecarStartArgs> {
  constructor() {
    super('OyasumiCore.ElevatedSidecarStartArgs', [
      { no: 1, name: 'pid', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: 'grpc_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 3, name: 'grpc_web_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 4, name: 'old_pid', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<ElevatedSidecarStartArgs>): ElevatedSidecarStartArgs {
    const message = { pid: 0, grpcPort: 0, grpcWebPort: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ElevatedSidecarStartArgs>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ElevatedSidecarStartArgs
  ): ElevatedSidecarStartArgs {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 pid */ 1:
          message.pid = reader.uint32();
          break;
        case /* uint32 grpc_port */ 2:
          message.grpcPort = reader.uint32();
          break;
        case /* uint32 grpc_web_port */ 3:
          message.grpcWebPort = reader.uint32();
          break;
        case /* optional uint32 old_pid */ 4:
          message.oldPid = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ElevatedSidecarStartArgs,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 pid = 1; */
    if (message.pid !== 0) writer.tag(1, WireType.Varint).uint32(message.pid);
    /* uint32 grpc_port = 2; */
    if (message.grpcPort !== 0) writer.tag(2, WireType.Varint).uint32(message.grpcPort);
    /* uint32 grpc_web_port = 3; */
    if (message.grpcWebPort !== 0) writer.tag(3, WireType.Varint).uint32(message.grpcWebPort);
    /* optional uint32 old_pid = 4; */
    if (message.oldPid !== undefined) writer.tag(4, WireType.Varint).uint32(message.oldPid);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.ElevatedSidecarStartArgs
 */
export const ElevatedSidecarStartArgs = new ElevatedSidecarStartArgs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MDNSSidecarStartArgs$Type extends MessageType<MDNSSidecarStartArgs> {
  constructor() {
    super('OyasumiCore.MDNSSidecarStartArgs', [
      { no: 1, name: 'pid', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<MDNSSidecarStartArgs>): MDNSSidecarStartArgs {
    const message = { pid: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<MDNSSidecarStartArgs>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MDNSSidecarStartArgs
  ): MDNSSidecarStartArgs {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 pid */ 1:
          message.pid = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: MDNSSidecarStartArgs,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 pid = 1; */
    if (message.pid !== 0) writer.tag(1, WireType.Varint).uint32(message.pid);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.MDNSSidecarStartArgs
 */
export const MDNSSidecarStartArgs = new MDNSSidecarStartArgs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventParams$Type extends MessageType<EventParams> {
  constructor() {
    super('OyasumiCore.EventParams', [
      { no: 1, name: 'event_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'string_data',
        kind: 'scalar',
        oneof: 'eventData',
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 3, name: 'bool_data', kind: 'scalar', oneof: 'eventData', T: 8 /*ScalarType.BOOL*/ },
      { no: 4, name: 'json_data', kind: 'scalar', oneof: 'eventData', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'int_data', kind: 'scalar', oneof: 'eventData', T: 5 /*ScalarType.INT32*/ },
      {
        no: 6,
        name: 'double_data',
        kind: 'scalar',
        oneof: 'eventData',
        T: 1 /*ScalarType.DOUBLE*/,
      },
    ]);
  }
  create(value?: PartialMessage<EventParams>): EventParams {
    const message = { eventName: '', eventData: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<EventParams>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EventParams
  ): EventParams {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string event_name */ 1:
          message.eventName = reader.string();
          break;
        case /* string string_data */ 2:
          message.eventData = {
            oneofKind: 'stringData',
            stringData: reader.string(),
          };
          break;
        case /* bool bool_data */ 3:
          message.eventData = {
            oneofKind: 'boolData',
            boolData: reader.bool(),
          };
          break;
        case /* string json_data */ 4:
          message.eventData = {
            oneofKind: 'jsonData',
            jsonData: reader.string(),
          };
          break;
        case /* int32 int_data */ 5:
          message.eventData = {
            oneofKind: 'intData',
            intData: reader.int32(),
          };
          break;
        case /* double double_data */ 6:
          message.eventData = {
            oneofKind: 'doubleData',
            doubleData: reader.double(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EventParams,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string event_name = 1; */
    if (message.eventName !== '') writer.tag(1, WireType.LengthDelimited).string(message.eventName);
    /* string string_data = 2; */
    if (message.eventData.oneofKind === 'stringData')
      writer.tag(2, WireType.LengthDelimited).string(message.eventData.stringData);
    /* bool bool_data = 3; */
    if (message.eventData.oneofKind === 'boolData')
      writer.tag(3, WireType.Varint).bool(message.eventData.boolData);
    /* string json_data = 4; */
    if (message.eventData.oneofKind === 'jsonData')
      writer.tag(4, WireType.LengthDelimited).string(message.eventData.jsonData);
    /* int32 int_data = 5; */
    if (message.eventData.oneofKind === 'intData')
      writer.tag(5, WireType.Varint).int32(message.eventData.intData);
    /* double double_data = 6; */
    if (message.eventData.oneofKind === 'doubleData')
      writer.tag(6, WireType.Bit64).double(message.eventData.doubleData);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.EventParams
 */
export const EventParams = new EventParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddNotificationRequest$Type extends MessageType<AddNotificationRequest> {
  constructor() {
    super('OyasumiCore.AddNotificationRequest', [
      { no: 1, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'duration', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<AddNotificationRequest>): AddNotificationRequest {
    const message = { message: '', duration: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<AddNotificationRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AddNotificationRequest
  ): AddNotificationRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string message */ 1:
          message.message = reader.string();
          break;
        case /* uint32 duration */ 2:
          message.duration = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AddNotificationRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string message = 1; */
    if (message.message !== '') writer.tag(1, WireType.LengthDelimited).string(message.message);
    /* uint32 duration = 2; */
    if (message.duration !== 0) writer.tag(2, WireType.Varint).uint32(message.duration);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.AddNotificationRequest
 */
export const AddNotificationRequest = new AddNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddNotificationResponse$Type extends MessageType<AddNotificationResponse> {
  constructor() {
    super('OyasumiCore.AddNotificationResponse', [
      { no: 1, name: 'notification_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<AddNotificationResponse>): AddNotificationResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<AddNotificationResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AddNotificationResponse
  ): AddNotificationResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string notification_id */ 1:
          message.notificationId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AddNotificationResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional string notification_id = 1; */
    if (message.notificationId !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.AddNotificationResponse
 */
export const AddNotificationResponse = new AddNotificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAddressRequest$Type extends MessageType<SetAddressRequest> {
  constructor() {
    super('OyasumiCore.SetAddressRequest', [
      { no: 1, name: 'host', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<SetAddressRequest>): SetAddressRequest {
    const message = { host: '', port: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<SetAddressRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SetAddressRequest
  ): SetAddressRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string host */ 1:
          message.host = reader.string();
          break;
        case /* uint32 port */ 2:
          message.port = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SetAddressRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string host = 1; */
    if (message.host !== '') writer.tag(1, WireType.LengthDelimited).string(message.host);
    /* uint32 port = 2; */
    if (message.port !== 0) writer.tag(2, WireType.Varint).uint32(message.port);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.SetAddressRequest
 */
export const SetAddressRequest = new SetAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
  constructor() {
    super('OyasumiCore.Empty', []);
  }
  create(value?: PartialMessage<Empty>): Empty {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<Empty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Empty
  ): Empty {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: Empty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service OyasumiCore.OyasumiCore
 */
export const OyasumiCore = new ServiceType('OyasumiCore.OyasumiCore', [
  { name: 'OnOverlaySidecarStart', options: {}, I: OverlaySidecarStartArgs, O: Empty },
  { name: 'OnElevatedSidecarStart', options: {}, I: ElevatedSidecarStartArgs, O: Empty },
  { name: 'OnMDNSSidecarStart', options: {}, I: MDNSSidecarStartArgs, O: Empty },
  { name: 'SendEvent', options: {}, I: EventParams, O: Empty },
  { name: 'GetHTTPServerPort', options: {}, I: Empty, O: HTTPServerPort },
  { name: 'AddNotification', options: {}, I: AddNotificationRequest, O: AddNotificationResponse },
  { name: 'SetVRChatOSCAddress', options: {}, I: SetAddressRequest, O: Empty },
  { name: 'SetVRChatOSCQueryAddress', options: {}, I: SetAddressRequest, O: Empty },
]);
