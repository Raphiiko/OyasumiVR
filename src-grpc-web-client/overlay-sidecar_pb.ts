// @generated by protobuf-ts 2.9.0 with parameter add_pb_suffix,force_server_none
// @generated from protobuf file "overlay-sidecar.proto" (package "OyasumiOverlaySidecar", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * Requests & Responses
 *
 * @generated from protobuf message OyasumiOverlaySidecar.AddNotificationRequest
 */
export interface AddNotificationRequest {
  /**
   * @generated from protobuf field: string message = 1;
   */
  message: string;
  /**
   * @generated from protobuf field: uint32 duration = 2;
   */
  duration: number;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.AddNotificationResponse
 */
export interface AddNotificationResponse {
  /**
   * @generated from protobuf field: optional string notification_id = 1;
   */
  notificationId?: string;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.ClearNotificationRequest
 */
export interface ClearNotificationRequest {
  /**
   * @generated from protobuf field: string notification_id = 1;
   */
  notificationId: string;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.SetDebugTranslationsRequest
 */
export interface SetDebugTranslationsRequest {
  /**
   * @generated from protobuf field: string translations = 1;
   */
  translations: string;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OverlayMenuOpenRequest
 */
export interface OverlayMenuOpenRequest {
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarControllerRole controller_role = 1;
   */
  controllerRole: OyasumiSidecarControllerRole;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.SetMicrophoneActiveRequest
 */
export interface SetMicrophoneActiveRequest {
  /**
   * @generated from protobuf field: bool active = 1;
   */
  active: boolean;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.MicrophoneActivityMode mode = 2;
   */
  mode: MicrophoneActivityMode;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.Empty
 */
export interface Empty {}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarState
 */
export interface OyasumiSidecarState {
  /**
   * @generated from protobuf field: bool sleep_mode = 1;
   */
  sleepMode: boolean;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.VrcStatus vrc_status = 2;
   */
  vrcStatus: VrcStatus;
  /**
   * @generated from protobuf field: string vrc_username = 3;
   */
  vrcUsername: string;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState automations = 4;
   */
  automations?: OyasumiSidecarAutomationsState;
  /**
   * @generated from protobuf field: string locale = 5;
   */
  locale: string;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo device_info = 6;
   */
  deviceInfo?: OyasumiSidecarDeviceInfo;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarOverlaySettings settings = 7;
   */
  settings?: OyasumiSidecarOverlaySettings;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarBrightnessState brightness_state = 8;
   */
  brightnessState?: OyasumiSidecarBrightnessState;
  /**
   * @generated from protobuf field: bool sleep_preparation_available = 9;
   */
  sleepPreparationAvailable: boolean;
  /**
   * @generated from protobuf field: bool sleep_preparation_timed_out = 10;
   */
  sleepPreparationTimedOut: boolean;
  /**
   * @generated from protobuf field: bool system_mic_muted = 11;
   */
  systemMicMuted: boolean;
}
/**
 * No longer required, but reserved for future settings
 *
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarOverlaySettings
 */
export interface OyasumiSidecarOverlaySettings {
  /**
   * @generated from protobuf field: bool system_mic_indicator_enabled = 1;
   */
  systemMicIndicatorEnabled: boolean;
  /**
   * @generated from protobuf field: double system_mic_indicator_opacity = 2;
   */
  systemMicIndicatorOpacity: number;
  /**
   * @generated from protobuf field: bool system_mic_indicator_fadeout = 3;
   */
  systemMicIndicatorFadeout: boolean;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.MicrophoneActivityMode system_mic_indicator_voice_activation_mode = 12;
   */
  systemMicIndicatorVoiceActivationMode: MicrophoneActivityMode;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo
 */
export interface OyasumiSidecarDeviceInfo {
  /**
   * @generated from protobuf field: repeated OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Controller controllers = 1;
   */
  controllers: OyasumiSidecarDeviceInfo_Controller[];
  /**
   * @generated from protobuf field: repeated OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Tracker trackers = 2;
   */
  trackers: OyasumiSidecarDeviceInfo_Tracker[];
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Controller
 */
export interface OyasumiSidecarDeviceInfo_Controller {
  /**
   * @generated from protobuf field: int32 index = 1;
   */
  index: number;
  /**
   * @generated from protobuf field: string manufacturer_name = 2;
   */
  manufacturerName: string;
  /**
   * @generated from protobuf field: string model_number = 3;
   */
  modelNumber: string;
  /**
   * @generated from protobuf field: string serial_number = 4;
   */
  serialNumber: string;
  /**
   * @generated from protobuf field: string hardware_revision = 5;
   */
  hardwareRevision: string;
  /**
   * @generated from protobuf field: string dongle_id = 6;
   */
  dongleId: string;
  /**
   * @generated from protobuf field: double battery = 7;
   */
  battery: number;
  /**
   * @generated from protobuf field: bool is_turning_off = 8;
   */
  isTurningOff: boolean;
  /**
   * @generated from protobuf field: bool can_power_off = 9;
   */
  canPowerOff: boolean;
  /**
   * @generated from protobuf field: bool is_charging = 10;
   */
  isCharging: boolean;
  /**
   * @generated from protobuf field: bool provides_battery_status = 11;
   */
  providesBatteryStatus: boolean;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Tracker
 */
export interface OyasumiSidecarDeviceInfo_Tracker {
  /**
   * @generated from protobuf field: int32 index = 1;
   */
  index: number;
  /**
   * @generated from protobuf field: string manufacturer_name = 2;
   */
  manufacturerName: string;
  /**
   * @generated from protobuf field: string model_number = 3;
   */
  modelNumber: string;
  /**
   * @generated from protobuf field: string serial_number = 4;
   */
  serialNumber: string;
  /**
   * @generated from protobuf field: string hardware_revision = 5;
   */
  hardwareRevision: string;
  /**
   * @generated from protobuf field: string dongle_id = 6;
   */
  dongleId: string;
  /**
   * @generated from protobuf field: double battery = 7;
   */
  battery: number;
  /**
   * @generated from protobuf field: bool is_turning_off = 8;
   */
  isTurningOff: boolean;
  /**
   * @generated from protobuf field: bool can_power_off = 9;
   */
  canPowerOff: boolean;
  /**
   * @generated from protobuf field: bool is_charging = 10;
   */
  isCharging: boolean;
  /**
   * @generated from protobuf field: bool provides_battery_status = 11;
   */
  providesBatteryStatus: boolean;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState
 */
export interface OyasumiSidecarAutomationsState {
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests autoAcceptInviteRequests = 1;
   */
  autoAcceptInviteRequests?: OyasumiSidecarAutomationsState_AutoAcceptInviteRequests;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount changeStatusBasedOnPlayerCount = 2;
   */
  changeStatusBasedOnPlayerCount?: OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepingAnimations sleepingAnimations = 3;
   */
  sleepingAnimations?: OyasumiSidecarAutomationsState_SleepingAnimations;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ShutdownAutomations shutdownAutomations = 4;
   */
  shutdownAutomations?: OyasumiSidecarAutomationsState_ShutdownAutomations;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector sleepModeEnableForSleepDetector = 5;
   */
  sleepModeEnableForSleepDetector?: OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests
 */
export interface OyasumiSidecarAutomationsState_AutoAcceptInviteRequests {
  /**
   * @generated from protobuf field: bool enabled = 1;
   */
  enabled: boolean;
  /**
   * @generated from protobuf field: OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode mode = 2;
   */
  mode: OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode;
  /**
   * @generated from protobuf field: uint32 player_count = 3;
   */
  playerCount: number;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount
 */
export interface OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount {
  /**
   * @generated from protobuf field: bool enabled = 1;
   */
  enabled: boolean;
  /**
   * @generated from protobuf field: uint32 threshold = 2;
   */
  threshold: number;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepingAnimations
 */
export interface OyasumiSidecarAutomationsState_SleepingAnimations {
  /**
   * @generated from protobuf field: bool enabled = 1;
   */
  enabled: boolean;
  /**
   * @generated from protobuf field: string preset_name = 2;
   */
  presetName: string;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ShutdownAutomations
 */
export interface OyasumiSidecarAutomationsState_ShutdownAutomations {
  /**
   * @generated from protobuf field: bool triggers_enabled = 1;
   */
  triggersEnabled: boolean;
  /**
   * @generated from protobuf field: bool running = 2;
   */
  running: boolean;
  /**
   * @generated from protobuf field: bool can_start = 3;
   */
  canStart: boolean;
  /**
   * @generated from protobuf field: uint32 triggers_configured = 4;
   */
  triggersConfigured: number;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector
 */
export interface OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector {
  /**
   * @generated from protobuf field: bool enabled = 1;
   */
  enabled: boolean;
  /**
   * @generated from protobuf field: string sensitivity = 2;
   */
  sensitivity: string;
  /**
   * @generated from protobuf field: bool activation_window = 3;
   */
  activationWindow: boolean;
  /**
   * @generated from protobuf field: repeated uint32 activation_window_start = 4;
   */
  activationWindowStart: number[];
  /**
   * @generated from protobuf field: repeated uint32 activation_window_end = 5;
   */
  activationWindowEnd: number[];
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarBrightnessState
 */
export interface OyasumiSidecarBrightnessState {
  /**
   * @generated from protobuf field: bool advanced_mode = 1;
   */
  advancedMode: boolean;
  /**
   * @generated from protobuf field: double brightness = 2;
   */
  brightness: number;
  /**
   * @generated from protobuf field: double hardware_brightness = 3;
   */
  hardwareBrightness: number;
  /**
   * @generated from protobuf field: double software_brightness = 4;
   */
  softwareBrightness: number;
  /**
   * @generated from protobuf field: bool brightness_transitioning = 5;
   */
  brightnessTransitioning: boolean;
  /**
   * @generated from protobuf field: bool hardware_brightness_transitioning = 6;
   */
  hardwareBrightnessTransitioning: boolean;
  /**
   * @generated from protobuf field: bool software_brightness_transitioning = 7;
   */
  softwareBrightnessTransitioning: boolean;
  /**
   * @generated from protobuf field: double brightness_transition_target = 8;
   */
  brightnessTransitionTarget: number;
  /**
   * @generated from protobuf field: double hardware_brightness_transition_target = 9;
   */
  hardwareBrightnessTransitionTarget: number;
  /**
   * @generated from protobuf field: double software_brightness_transition_target = 10;
   */
  softwareBrightnessTransitionTarget: number;
  /**
   * @generated from protobuf field: bool hardware_brightness_available = 11;
   */
  hardwareBrightnessAvailable: boolean;
  /**
   * @generated from protobuf field: double hardware_min_brightness = 12;
   */
  hardwareMinBrightness: number;
  /**
   * @generated from protobuf field: double hardware_max_brightness = 13;
   */
  hardwareMaxBrightness: number;
}
/**
 * @generated from protobuf enum OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode
 */
export enum OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode {
  /**
   * @generated from protobuf enum value: OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_Disabled = 0;
   */
  Disabled = 0,
  /**
   * @generated from protobuf enum value: OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_Whitelist = 1;
   */
  Whitelist = 1,
  /**
   * @generated from protobuf enum value: OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_Blacklist = 2;
   */
  Blacklist = 2,
}
/**
 * @generated from protobuf enum OyasumiOverlaySidecar.VrcStatus
 */
export enum VrcStatus {
  /**
   * @generated from protobuf enum value: VRC_STATUS_Offline = 0;
   */
  Offline = 0,
  /**
   * @generated from protobuf enum value: VRC_STATUS_Busy = 1;
   */
  Busy = 1,
  /**
   * @generated from protobuf enum value: VRC_STATUS_AskMe = 2;
   */
  AskMe = 2,
  /**
   * @generated from protobuf enum value: VRC_STATUS_Active = 3;
   */
  Active = 3,
  /**
   * @generated from protobuf enum value: VRC_STATUS_JoinMe = 4;
   */
  JoinMe = 4,
}
/**
 * @generated from protobuf enum OyasumiOverlaySidecar.OyasumiSidecarControllerRole
 */
export enum OyasumiSidecarControllerRole {
  /**
   * @generated from protobuf enum value: OYASUMI_SIDECAR_CONTROLLER_ROLE_Left = 0;
   */
  Left = 0,
  /**
   * @generated from protobuf enum value: OYASUMI_SIDECAR_CONTROLLER_ROLE_Right = 1;
   */
  Right = 1,
}
/**
 * @generated from protobuf enum OyasumiOverlaySidecar.MicrophoneActivityMode
 */
export enum MicrophoneActivityMode {
  /**
   * @generated from protobuf enum value: MICROPHONE_ACTIVITY_MODE_Hardware = 0;
   */
  Hardware = 0,
  /**
   * @generated from protobuf enum value: MICROPHONE_ACTIVITY_MODE_VRChat = 1;
   */
  VRChat = 1,
}
// @generated message type with reflection information, may provide speed optimized methods
class AddNotificationRequest$Type extends MessageType<AddNotificationRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.AddNotificationRequest', [
      { no: 1, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'duration', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<AddNotificationRequest>): AddNotificationRequest {
    const message = { message: '', duration: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<AddNotificationRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AddNotificationRequest
  ): AddNotificationRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string message */ 1:
          message.message = reader.string();
          break;
        case /* uint32 duration */ 2:
          message.duration = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AddNotificationRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string message = 1; */
    if (message.message !== '') writer.tag(1, WireType.LengthDelimited).string(message.message);
    /* uint32 duration = 2; */
    if (message.duration !== 0) writer.tag(2, WireType.Varint).uint32(message.duration);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.AddNotificationRequest
 */
export const AddNotificationRequest = new AddNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddNotificationResponse$Type extends MessageType<AddNotificationResponse> {
  constructor() {
    super('OyasumiOverlaySidecar.AddNotificationResponse', [
      { no: 1, name: 'notification_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<AddNotificationResponse>): AddNotificationResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<AddNotificationResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AddNotificationResponse
  ): AddNotificationResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string notification_id */ 1:
          message.notificationId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AddNotificationResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional string notification_id = 1; */
    if (message.notificationId !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.AddNotificationResponse
 */
export const AddNotificationResponse = new AddNotificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearNotificationRequest$Type extends MessageType<ClearNotificationRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.ClearNotificationRequest', [
      { no: 1, name: 'notification_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ClearNotificationRequest>): ClearNotificationRequest {
    const message = { notificationId: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ClearNotificationRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ClearNotificationRequest
  ): ClearNotificationRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string notification_id */ 1:
          message.notificationId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ClearNotificationRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string notification_id = 1; */
    if (message.notificationId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.ClearNotificationRequest
 */
export const ClearNotificationRequest = new ClearNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDebugTranslationsRequest$Type extends MessageType<SetDebugTranslationsRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.SetDebugTranslationsRequest', [
      { no: 1, name: 'translations', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<SetDebugTranslationsRequest>): SetDebugTranslationsRequest {
    const message = { translations: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<SetDebugTranslationsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SetDebugTranslationsRequest
  ): SetDebugTranslationsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string translations */ 1:
          message.translations = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SetDebugTranslationsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string translations = 1; */
    if (message.translations !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.translations);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.SetDebugTranslationsRequest
 */
export const SetDebugTranslationsRequest = new SetDebugTranslationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverlayMenuOpenRequest$Type extends MessageType<OverlayMenuOpenRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.OverlayMenuOpenRequest', [
      {
        no: 1,
        name: 'controller_role',
        kind: 'enum',
        T: () => [
          'OyasumiOverlaySidecar.OyasumiSidecarControllerRole',
          OyasumiSidecarControllerRole,
          'OYASUMI_SIDECAR_CONTROLLER_ROLE_',
        ],
      },
    ]);
  }
  create(value?: PartialMessage<OverlayMenuOpenRequest>): OverlayMenuOpenRequest {
    const message = { controllerRole: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<OverlayMenuOpenRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OverlayMenuOpenRequest
  ): OverlayMenuOpenRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* OyasumiOverlaySidecar.OyasumiSidecarControllerRole controller_role */ 1:
          message.controllerRole = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OverlayMenuOpenRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* OyasumiOverlaySidecar.OyasumiSidecarControllerRole controller_role = 1; */
    if (message.controllerRole !== 0) writer.tag(1, WireType.Varint).int32(message.controllerRole);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OverlayMenuOpenRequest
 */
export const OverlayMenuOpenRequest = new OverlayMenuOpenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMicrophoneActiveRequest$Type extends MessageType<SetMicrophoneActiveRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.SetMicrophoneActiveRequest', [
      { no: 1, name: 'active', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 2,
        name: 'mode',
        kind: 'enum',
        T: () => [
          'OyasumiOverlaySidecar.MicrophoneActivityMode',
          MicrophoneActivityMode,
          'MICROPHONE_ACTIVITY_MODE_',
        ],
      },
    ]);
  }
  create(value?: PartialMessage<SetMicrophoneActiveRequest>): SetMicrophoneActiveRequest {
    const message = { active: false, mode: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<SetMicrophoneActiveRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SetMicrophoneActiveRequest
  ): SetMicrophoneActiveRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool active */ 1:
          message.active = reader.bool();
          break;
        case /* OyasumiOverlaySidecar.MicrophoneActivityMode mode */ 2:
          message.mode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SetMicrophoneActiveRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool active = 1; */
    if (message.active !== false) writer.tag(1, WireType.Varint).bool(message.active);
    /* OyasumiOverlaySidecar.MicrophoneActivityMode mode = 2; */
    if (message.mode !== 0) writer.tag(2, WireType.Varint).int32(message.mode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.SetMicrophoneActiveRequest
 */
export const SetMicrophoneActiveRequest = new SetMicrophoneActiveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
  constructor() {
    super('OyasumiOverlaySidecar.Empty', []);
  }
  create(value?: PartialMessage<Empty>): Empty {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<Empty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Empty
  ): Empty {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: Empty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarState$Type extends MessageType<OyasumiSidecarState> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarState', [
      { no: 1, name: 'sleep_mode', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 2,
        name: 'vrc_status',
        kind: 'enum',
        T: () => ['OyasumiOverlaySidecar.VrcStatus', VrcStatus, 'VRC_STATUS_'],
      },
      { no: 3, name: 'vrc_username', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'automations', kind: 'message', T: () => OyasumiSidecarAutomationsState },
      { no: 5, name: 'locale', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'device_info', kind: 'message', T: () => OyasumiSidecarDeviceInfo },
      { no: 7, name: 'settings', kind: 'message', T: () => OyasumiSidecarOverlaySettings },
      { no: 8, name: 'brightness_state', kind: 'message', T: () => OyasumiSidecarBrightnessState },
      { no: 9, name: 'sleep_preparation_available', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 10, name: 'sleep_preparation_timed_out', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 11, name: 'system_mic_muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
    ]);
  }
  create(value?: PartialMessage<OyasumiSidecarState>): OyasumiSidecarState {
    const message = {
      sleepMode: false,
      vrcStatus: 0,
      vrcUsername: '',
      locale: '',
      sleepPreparationAvailable: false,
      sleepPreparationTimedOut: false,
      systemMicMuted: false,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<OyasumiSidecarState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarState
  ): OyasumiSidecarState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool sleep_mode */ 1:
          message.sleepMode = reader.bool();
          break;
        case /* OyasumiOverlaySidecar.VrcStatus vrc_status */ 2:
          message.vrcStatus = reader.int32();
          break;
        case /* string vrc_username */ 3:
          message.vrcUsername = reader.string();
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState automations */ 4:
          message.automations = OyasumiSidecarAutomationsState.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.automations
          );
          break;
        case /* string locale */ 5:
          message.locale = reader.string();
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo device_info */ 6:
          message.deviceInfo = OyasumiSidecarDeviceInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.deviceInfo
          );
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarOverlaySettings settings */ 7:
          message.settings = OyasumiSidecarOverlaySettings.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.settings
          );
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarBrightnessState brightness_state */ 8:
          message.brightnessState = OyasumiSidecarBrightnessState.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.brightnessState
          );
          break;
        case /* bool sleep_preparation_available */ 9:
          message.sleepPreparationAvailable = reader.bool();
          break;
        case /* bool sleep_preparation_timed_out */ 10:
          message.sleepPreparationTimedOut = reader.bool();
          break;
        case /* bool system_mic_muted */ 11:
          message.systemMicMuted = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool sleep_mode = 1; */
    if (message.sleepMode !== false) writer.tag(1, WireType.Varint).bool(message.sleepMode);
    /* OyasumiOverlaySidecar.VrcStatus vrc_status = 2; */
    if (message.vrcStatus !== 0) writer.tag(2, WireType.Varint).int32(message.vrcStatus);
    /* string vrc_username = 3; */
    if (message.vrcUsername !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.vrcUsername);
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState automations = 4; */
    if (message.automations)
      OyasumiSidecarAutomationsState.internalBinaryWrite(
        message.automations,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* string locale = 5; */
    if (message.locale !== '') writer.tag(5, WireType.LengthDelimited).string(message.locale);
    /* OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo device_info = 6; */
    if (message.deviceInfo)
      OyasumiSidecarDeviceInfo.internalBinaryWrite(
        message.deviceInfo,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* OyasumiOverlaySidecar.OyasumiSidecarOverlaySettings settings = 7; */
    if (message.settings)
      OyasumiSidecarOverlaySettings.internalBinaryWrite(
        message.settings,
        writer.tag(7, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* OyasumiOverlaySidecar.OyasumiSidecarBrightnessState brightness_state = 8; */
    if (message.brightnessState)
      OyasumiSidecarBrightnessState.internalBinaryWrite(
        message.brightnessState,
        writer.tag(8, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* bool sleep_preparation_available = 9; */
    if (message.sleepPreparationAvailable !== false)
      writer.tag(9, WireType.Varint).bool(message.sleepPreparationAvailable);
    /* bool sleep_preparation_timed_out = 10; */
    if (message.sleepPreparationTimedOut !== false)
      writer.tag(10, WireType.Varint).bool(message.sleepPreparationTimedOut);
    /* bool system_mic_muted = 11; */
    if (message.systemMicMuted !== false)
      writer.tag(11, WireType.Varint).bool(message.systemMicMuted);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarState
 */
export const OyasumiSidecarState = new OyasumiSidecarState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarOverlaySettings$Type extends MessageType<OyasumiSidecarOverlaySettings> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarOverlaySettings', [
      { no: 1, name: 'system_mic_indicator_enabled', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 2, name: 'system_mic_indicator_opacity', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 3, name: 'system_mic_indicator_fadeout', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 12,
        name: 'system_mic_indicator_voice_activation_mode',
        kind: 'enum',
        T: () => [
          'OyasumiOverlaySidecar.MicrophoneActivityMode',
          MicrophoneActivityMode,
          'MICROPHONE_ACTIVITY_MODE_',
        ],
      },
    ]);
  }
  create(value?: PartialMessage<OyasumiSidecarOverlaySettings>): OyasumiSidecarOverlaySettings {
    const message = {
      systemMicIndicatorEnabled: false,
      systemMicIndicatorOpacity: 0,
      systemMicIndicatorFadeout: false,
      systemMicIndicatorVoiceActivationMode: 0,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarOverlaySettings>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarOverlaySettings
  ): OyasumiSidecarOverlaySettings {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool system_mic_indicator_enabled */ 1:
          message.systemMicIndicatorEnabled = reader.bool();
          break;
        case /* double system_mic_indicator_opacity */ 2:
          message.systemMicIndicatorOpacity = reader.double();
          break;
        case /* bool system_mic_indicator_fadeout */ 3:
          message.systemMicIndicatorFadeout = reader.bool();
          break;
        case /* OyasumiOverlaySidecar.MicrophoneActivityMode system_mic_indicator_voice_activation_mode */ 12:
          message.systemMicIndicatorVoiceActivationMode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarOverlaySettings,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool system_mic_indicator_enabled = 1; */
    if (message.systemMicIndicatorEnabled !== false)
      writer.tag(1, WireType.Varint).bool(message.systemMicIndicatorEnabled);
    /* double system_mic_indicator_opacity = 2; */
    if (message.systemMicIndicatorOpacity !== 0)
      writer.tag(2, WireType.Bit64).double(message.systemMicIndicatorOpacity);
    /* bool system_mic_indicator_fadeout = 3; */
    if (message.systemMicIndicatorFadeout !== false)
      writer.tag(3, WireType.Varint).bool(message.systemMicIndicatorFadeout);
    /* OyasumiOverlaySidecar.MicrophoneActivityMode system_mic_indicator_voice_activation_mode = 12; */
    if (message.systemMicIndicatorVoiceActivationMode !== 0)
      writer.tag(12, WireType.Varint).int32(message.systemMicIndicatorVoiceActivationMode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarOverlaySettings
 */
export const OyasumiSidecarOverlaySettings = new OyasumiSidecarOverlaySettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarDeviceInfo$Type extends MessageType<OyasumiSidecarDeviceInfo> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo', [
      {
        no: 1,
        name: 'controllers',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => OyasumiSidecarDeviceInfo_Controller,
      },
      {
        no: 2,
        name: 'trackers',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => OyasumiSidecarDeviceInfo_Tracker,
      },
    ]);
  }
  create(value?: PartialMessage<OyasumiSidecarDeviceInfo>): OyasumiSidecarDeviceInfo {
    const message = { controllers: [], trackers: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<OyasumiSidecarDeviceInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarDeviceInfo
  ): OyasumiSidecarDeviceInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Controller controllers */ 1:
          message.controllers.push(
            OyasumiSidecarDeviceInfo_Controller.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* repeated OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Tracker trackers */ 2:
          message.trackers.push(
            OyasumiSidecarDeviceInfo_Tracker.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarDeviceInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Controller controllers = 1; */
    for (let i = 0; i < message.controllers.length; i++)
      OyasumiSidecarDeviceInfo_Controller.internalBinaryWrite(
        message.controllers[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* repeated OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Tracker trackers = 2; */
    for (let i = 0; i < message.trackers.length; i++)
      OyasumiSidecarDeviceInfo_Tracker.internalBinaryWrite(
        message.trackers[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo
 */
export const OyasumiSidecarDeviceInfo = new OyasumiSidecarDeviceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarDeviceInfo_Controller$Type extends MessageType<OyasumiSidecarDeviceInfo_Controller> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Controller', [
      { no: 1, name: 'index', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'manufacturer_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'model_number', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'serial_number', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'hardware_revision', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'dongle_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: 'battery', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 8, name: 'is_turning_off', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 9, name: 'can_power_off', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 10, name: 'is_charging', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 11, name: 'provides_battery_status', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarDeviceInfo_Controller>
  ): OyasumiSidecarDeviceInfo_Controller {
    const message = {
      index: 0,
      manufacturerName: '',
      modelNumber: '',
      serialNumber: '',
      hardwareRevision: '',
      dongleId: '',
      battery: 0,
      isTurningOff: false,
      canPowerOff: false,
      isCharging: false,
      providesBatteryStatus: false,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarDeviceInfo_Controller>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarDeviceInfo_Controller
  ): OyasumiSidecarDeviceInfo_Controller {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 index */ 1:
          message.index = reader.int32();
          break;
        case /* string manufacturer_name */ 2:
          message.manufacturerName = reader.string();
          break;
        case /* string model_number */ 3:
          message.modelNumber = reader.string();
          break;
        case /* string serial_number */ 4:
          message.serialNumber = reader.string();
          break;
        case /* string hardware_revision */ 5:
          message.hardwareRevision = reader.string();
          break;
        case /* string dongle_id */ 6:
          message.dongleId = reader.string();
          break;
        case /* double battery */ 7:
          message.battery = reader.double();
          break;
        case /* bool is_turning_off */ 8:
          message.isTurningOff = reader.bool();
          break;
        case /* bool can_power_off */ 9:
          message.canPowerOff = reader.bool();
          break;
        case /* bool is_charging */ 10:
          message.isCharging = reader.bool();
          break;
        case /* bool provides_battery_status */ 11:
          message.providesBatteryStatus = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarDeviceInfo_Controller,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 index = 1; */
    if (message.index !== 0) writer.tag(1, WireType.Varint).int32(message.index);
    /* string manufacturer_name = 2; */
    if (message.manufacturerName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.manufacturerName);
    /* string model_number = 3; */
    if (message.modelNumber !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.modelNumber);
    /* string serial_number = 4; */
    if (message.serialNumber !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.serialNumber);
    /* string hardware_revision = 5; */
    if (message.hardwareRevision !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.hardwareRevision);
    /* string dongle_id = 6; */
    if (message.dongleId !== '') writer.tag(6, WireType.LengthDelimited).string(message.dongleId);
    /* double battery = 7; */
    if (message.battery !== 0) writer.tag(7, WireType.Bit64).double(message.battery);
    /* bool is_turning_off = 8; */
    if (message.isTurningOff !== false) writer.tag(8, WireType.Varint).bool(message.isTurningOff);
    /* bool can_power_off = 9; */
    if (message.canPowerOff !== false) writer.tag(9, WireType.Varint).bool(message.canPowerOff);
    /* bool is_charging = 10; */
    if (message.isCharging !== false) writer.tag(10, WireType.Varint).bool(message.isCharging);
    /* bool provides_battery_status = 11; */
    if (message.providesBatteryStatus !== false)
      writer.tag(11, WireType.Varint).bool(message.providesBatteryStatus);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Controller
 */
export const OyasumiSidecarDeviceInfo_Controller = new OyasumiSidecarDeviceInfo_Controller$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarDeviceInfo_Tracker$Type extends MessageType<OyasumiSidecarDeviceInfo_Tracker> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Tracker', [
      { no: 1, name: 'index', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'manufacturer_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'model_number', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'serial_number', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'hardware_revision', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'dongle_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: 'battery', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 8, name: 'is_turning_off', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 9, name: 'can_power_off', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 10, name: 'is_charging', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 11, name: 'provides_battery_status', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarDeviceInfo_Tracker>
  ): OyasumiSidecarDeviceInfo_Tracker {
    const message = {
      index: 0,
      manufacturerName: '',
      modelNumber: '',
      serialNumber: '',
      hardwareRevision: '',
      dongleId: '',
      battery: 0,
      isTurningOff: false,
      canPowerOff: false,
      isCharging: false,
      providesBatteryStatus: false,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarDeviceInfo_Tracker>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarDeviceInfo_Tracker
  ): OyasumiSidecarDeviceInfo_Tracker {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 index */ 1:
          message.index = reader.int32();
          break;
        case /* string manufacturer_name */ 2:
          message.manufacturerName = reader.string();
          break;
        case /* string model_number */ 3:
          message.modelNumber = reader.string();
          break;
        case /* string serial_number */ 4:
          message.serialNumber = reader.string();
          break;
        case /* string hardware_revision */ 5:
          message.hardwareRevision = reader.string();
          break;
        case /* string dongle_id */ 6:
          message.dongleId = reader.string();
          break;
        case /* double battery */ 7:
          message.battery = reader.double();
          break;
        case /* bool is_turning_off */ 8:
          message.isTurningOff = reader.bool();
          break;
        case /* bool can_power_off */ 9:
          message.canPowerOff = reader.bool();
          break;
        case /* bool is_charging */ 10:
          message.isCharging = reader.bool();
          break;
        case /* bool provides_battery_status */ 11:
          message.providesBatteryStatus = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarDeviceInfo_Tracker,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 index = 1; */
    if (message.index !== 0) writer.tag(1, WireType.Varint).int32(message.index);
    /* string manufacturer_name = 2; */
    if (message.manufacturerName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.manufacturerName);
    /* string model_number = 3; */
    if (message.modelNumber !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.modelNumber);
    /* string serial_number = 4; */
    if (message.serialNumber !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.serialNumber);
    /* string hardware_revision = 5; */
    if (message.hardwareRevision !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.hardwareRevision);
    /* string dongle_id = 6; */
    if (message.dongleId !== '') writer.tag(6, WireType.LengthDelimited).string(message.dongleId);
    /* double battery = 7; */
    if (message.battery !== 0) writer.tag(7, WireType.Bit64).double(message.battery);
    /* bool is_turning_off = 8; */
    if (message.isTurningOff !== false) writer.tag(8, WireType.Varint).bool(message.isTurningOff);
    /* bool can_power_off = 9; */
    if (message.canPowerOff !== false) writer.tag(9, WireType.Varint).bool(message.canPowerOff);
    /* bool is_charging = 10; */
    if (message.isCharging !== false) writer.tag(10, WireType.Varint).bool(message.isCharging);
    /* bool provides_battery_status = 11; */
    if (message.providesBatteryStatus !== false)
      writer.tag(11, WireType.Varint).bool(message.providesBatteryStatus);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarDeviceInfo_Tracker
 */
export const OyasumiSidecarDeviceInfo_Tracker = new OyasumiSidecarDeviceInfo_Tracker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarAutomationsState$Type extends MessageType<OyasumiSidecarAutomationsState> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarAutomationsState', [
      {
        no: 1,
        name: 'autoAcceptInviteRequests',
        kind: 'message',
        T: () => OyasumiSidecarAutomationsState_AutoAcceptInviteRequests,
      },
      {
        no: 2,
        name: 'changeStatusBasedOnPlayerCount',
        kind: 'message',
        T: () => OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount,
      },
      {
        no: 3,
        name: 'sleepingAnimations',
        kind: 'message',
        T: () => OyasumiSidecarAutomationsState_SleepingAnimations,
      },
      {
        no: 4,
        name: 'shutdownAutomations',
        kind: 'message',
        T: () => OyasumiSidecarAutomationsState_ShutdownAutomations,
      },
      {
        no: 5,
        name: 'sleepModeEnableForSleepDetector',
        kind: 'message',
        T: () => OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector,
      },
    ]);
  }
  create(value?: PartialMessage<OyasumiSidecarAutomationsState>): OyasumiSidecarAutomationsState {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarAutomationsState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarAutomationsState
  ): OyasumiSidecarAutomationsState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests autoAcceptInviteRequests */ 1:
          message.autoAcceptInviteRequests =
            OyasumiSidecarAutomationsState_AutoAcceptInviteRequests.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.autoAcceptInviteRequests
            );
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount changeStatusBasedOnPlayerCount */ 2:
          message.changeStatusBasedOnPlayerCount =
            OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.changeStatusBasedOnPlayerCount
            );
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepingAnimations sleepingAnimations */ 3:
          message.sleepingAnimations =
            OyasumiSidecarAutomationsState_SleepingAnimations.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.sleepingAnimations
            );
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ShutdownAutomations shutdownAutomations */ 4:
          message.shutdownAutomations =
            OyasumiSidecarAutomationsState_ShutdownAutomations.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.shutdownAutomations
            );
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector sleepModeEnableForSleepDetector */ 5:
          message.sleepModeEnableForSleepDetector =
            OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.sleepModeEnableForSleepDetector
            );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarAutomationsState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests autoAcceptInviteRequests = 1; */
    if (message.autoAcceptInviteRequests)
      OyasumiSidecarAutomationsState_AutoAcceptInviteRequests.internalBinaryWrite(
        message.autoAcceptInviteRequests,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount changeStatusBasedOnPlayerCount = 2; */
    if (message.changeStatusBasedOnPlayerCount)
      OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount.internalBinaryWrite(
        message.changeStatusBasedOnPlayerCount,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepingAnimations sleepingAnimations = 3; */
    if (message.sleepingAnimations)
      OyasumiSidecarAutomationsState_SleepingAnimations.internalBinaryWrite(
        message.sleepingAnimations,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ShutdownAutomations shutdownAutomations = 4; */
    if (message.shutdownAutomations)
      OyasumiSidecarAutomationsState_ShutdownAutomations.internalBinaryWrite(
        message.shutdownAutomations,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector sleepModeEnableForSleepDetector = 5; */
    if (message.sleepModeEnableForSleepDetector)
      OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector.internalBinaryWrite(
        message.sleepModeEnableForSleepDetector,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState
 */
export const OyasumiSidecarAutomationsState = new OyasumiSidecarAutomationsState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarAutomationsState_AutoAcceptInviteRequests$Type extends MessageType<OyasumiSidecarAutomationsState_AutoAcceptInviteRequests> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests', [
      { no: 1, name: 'enabled', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 2,
        name: 'mode',
        kind: 'enum',
        T: () => [
          'OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode',
          OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode,
          'OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_',
        ],
      },
      { no: 3, name: 'player_count', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarAutomationsState_AutoAcceptInviteRequests>
  ): OyasumiSidecarAutomationsState_AutoAcceptInviteRequests {
    const message = { enabled: false, mode: 0, playerCount: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarAutomationsState_AutoAcceptInviteRequests>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarAutomationsState_AutoAcceptInviteRequests
  ): OyasumiSidecarAutomationsState_AutoAcceptInviteRequests {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool enabled */ 1:
          message.enabled = reader.bool();
          break;
        case /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode mode */ 2:
          message.mode = reader.int32();
          break;
        case /* uint32 player_count */ 3:
          message.playerCount = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarAutomationsState_AutoAcceptInviteRequests,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool enabled = 1; */
    if (message.enabled !== false) writer.tag(1, WireType.Varint).bool(message.enabled);
    /* OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode mode = 2; */
    if (message.mode !== 0) writer.tag(2, WireType.Varint).int32(message.mode);
    /* uint32 player_count = 3; */
    if (message.playerCount !== 0) writer.tag(3, WireType.Varint).uint32(message.playerCount);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_AutoAcceptInviteRequests
 */
export const OyasumiSidecarAutomationsState_AutoAcceptInviteRequests =
  new OyasumiSidecarAutomationsState_AutoAcceptInviteRequests$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount$Type extends MessageType<OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount', [
      { no: 1, name: 'enabled', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 2, name: 'threshold', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount>
  ): OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount {
    const message = { enabled: false, threshold: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount
  ): OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool enabled */ 1:
          message.enabled = reader.bool();
          break;
        case /* uint32 threshold */ 2:
          message.threshold = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool enabled = 1; */
    if (message.enabled !== false) writer.tag(1, WireType.Varint).bool(message.enabled);
    /* uint32 threshold = 2; */
    if (message.threshold !== 0) writer.tag(2, WireType.Varint).uint32(message.threshold);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount
 */
export const OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount =
  new OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarAutomationsState_SleepingAnimations$Type extends MessageType<OyasumiSidecarAutomationsState_SleepingAnimations> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepingAnimations', [
      { no: 1, name: 'enabled', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 2, name: 'preset_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarAutomationsState_SleepingAnimations>
  ): OyasumiSidecarAutomationsState_SleepingAnimations {
    const message = { enabled: false, presetName: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarAutomationsState_SleepingAnimations>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarAutomationsState_SleepingAnimations
  ): OyasumiSidecarAutomationsState_SleepingAnimations {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool enabled */ 1:
          message.enabled = reader.bool();
          break;
        case /* string preset_name */ 2:
          message.presetName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarAutomationsState_SleepingAnimations,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool enabled = 1; */
    if (message.enabled !== false) writer.tag(1, WireType.Varint).bool(message.enabled);
    /* string preset_name = 2; */
    if (message.presetName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.presetName);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepingAnimations
 */
export const OyasumiSidecarAutomationsState_SleepingAnimations =
  new OyasumiSidecarAutomationsState_SleepingAnimations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarAutomationsState_ShutdownAutomations$Type extends MessageType<OyasumiSidecarAutomationsState_ShutdownAutomations> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ShutdownAutomations', [
      { no: 1, name: 'triggers_enabled', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 2, name: 'running', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 3, name: 'can_start', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 4, name: 'triggers_configured', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarAutomationsState_ShutdownAutomations>
  ): OyasumiSidecarAutomationsState_ShutdownAutomations {
    const message = {
      triggersEnabled: false,
      running: false,
      canStart: false,
      triggersConfigured: 0,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarAutomationsState_ShutdownAutomations>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarAutomationsState_ShutdownAutomations
  ): OyasumiSidecarAutomationsState_ShutdownAutomations {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool triggers_enabled */ 1:
          message.triggersEnabled = reader.bool();
          break;
        case /* bool running */ 2:
          message.running = reader.bool();
          break;
        case /* bool can_start */ 3:
          message.canStart = reader.bool();
          break;
        case /* uint32 triggers_configured */ 4:
          message.triggersConfigured = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarAutomationsState_ShutdownAutomations,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool triggers_enabled = 1; */
    if (message.triggersEnabled !== false)
      writer.tag(1, WireType.Varint).bool(message.triggersEnabled);
    /* bool running = 2; */
    if (message.running !== false) writer.tag(2, WireType.Varint).bool(message.running);
    /* bool can_start = 3; */
    if (message.canStart !== false) writer.tag(3, WireType.Varint).bool(message.canStart);
    /* uint32 triggers_configured = 4; */
    if (message.triggersConfigured !== 0)
      writer.tag(4, WireType.Varint).uint32(message.triggersConfigured);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_ShutdownAutomations
 */
export const OyasumiSidecarAutomationsState_ShutdownAutomations =
  new OyasumiSidecarAutomationsState_ShutdownAutomations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector$Type extends MessageType<OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector', [
      { no: 1, name: 'enabled', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 2, name: 'sensitivity', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'activation_window', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 4,
        name: 'activation_window_start',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: 'activation_window_end',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector>
  ): OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector {
    const message = {
      enabled: false,
      sensitivity: '',
      activationWindow: false,
      activationWindowStart: [],
      activationWindowEnd: [],
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector
  ): OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool enabled */ 1:
          message.enabled = reader.bool();
          break;
        case /* string sensitivity */ 2:
          message.sensitivity = reader.string();
          break;
        case /* bool activation_window */ 3:
          message.activationWindow = reader.bool();
          break;
        case /* repeated uint32 activation_window_start */ 4:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.activationWindowStart.push(reader.uint32());
          else message.activationWindowStart.push(reader.uint32());
          break;
        case /* repeated uint32 activation_window_end */ 5:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.activationWindowEnd.push(reader.uint32());
          else message.activationWindowEnd.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool enabled = 1; */
    if (message.enabled !== false) writer.tag(1, WireType.Varint).bool(message.enabled);
    /* string sensitivity = 2; */
    if (message.sensitivity !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.sensitivity);
    /* bool activation_window = 3; */
    if (message.activationWindow !== false)
      writer.tag(3, WireType.Varint).bool(message.activationWindow);
    /* repeated uint32 activation_window_start = 4; */
    if (message.activationWindowStart.length) {
      writer.tag(4, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.activationWindowStart.length; i++)
        writer.uint32(message.activationWindowStart[i]);
      writer.join();
    }
    /* repeated uint32 activation_window_end = 5; */
    if (message.activationWindowEnd.length) {
      writer.tag(5, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.activationWindowEnd.length; i++)
        writer.uint32(message.activationWindowEnd[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector
 */
export const OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector =
  new OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarBrightnessState$Type extends MessageType<OyasumiSidecarBrightnessState> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarBrightnessState', [
      { no: 1, name: 'advanced_mode', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 2, name: 'brightness', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 3, name: 'hardware_brightness', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 4, name: 'software_brightness', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 5, name: 'brightness_transitioning', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 6,
        name: 'hardware_brightness_transitioning',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 7,
        name: 'software_brightness_transitioning',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
      { no: 8, name: 'brightness_transition_target', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      {
        no: 9,
        name: 'hardware_brightness_transition_target',
        kind: 'scalar',
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 10,
        name: 'software_brightness_transition_target',
        kind: 'scalar',
        T: 1 /*ScalarType.DOUBLE*/,
      },
      { no: 11, name: 'hardware_brightness_available', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      { no: 12, name: 'hardware_min_brightness', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 13, name: 'hardware_max_brightness', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
    ]);
  }
  create(value?: PartialMessage<OyasumiSidecarBrightnessState>): OyasumiSidecarBrightnessState {
    const message = {
      advancedMode: false,
      brightness: 0,
      hardwareBrightness: 0,
      softwareBrightness: 0,
      brightnessTransitioning: false,
      hardwareBrightnessTransitioning: false,
      softwareBrightnessTransitioning: false,
      brightnessTransitionTarget: 0,
      hardwareBrightnessTransitionTarget: 0,
      softwareBrightnessTransitionTarget: 0,
      hardwareBrightnessAvailable: false,
      hardwareMinBrightness: 0,
      hardwareMaxBrightness: 0,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<OyasumiSidecarBrightnessState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarBrightnessState
  ): OyasumiSidecarBrightnessState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool advanced_mode */ 1:
          message.advancedMode = reader.bool();
          break;
        case /* double brightness */ 2:
          message.brightness = reader.double();
          break;
        case /* double hardware_brightness */ 3:
          message.hardwareBrightness = reader.double();
          break;
        case /* double software_brightness */ 4:
          message.softwareBrightness = reader.double();
          break;
        case /* bool brightness_transitioning */ 5:
          message.brightnessTransitioning = reader.bool();
          break;
        case /* bool hardware_brightness_transitioning */ 6:
          message.hardwareBrightnessTransitioning = reader.bool();
          break;
        case /* bool software_brightness_transitioning */ 7:
          message.softwareBrightnessTransitioning = reader.bool();
          break;
        case /* double brightness_transition_target */ 8:
          message.brightnessTransitionTarget = reader.double();
          break;
        case /* double hardware_brightness_transition_target */ 9:
          message.hardwareBrightnessTransitionTarget = reader.double();
          break;
        case /* double software_brightness_transition_target */ 10:
          message.softwareBrightnessTransitionTarget = reader.double();
          break;
        case /* bool hardware_brightness_available */ 11:
          message.hardwareBrightnessAvailable = reader.bool();
          break;
        case /* double hardware_min_brightness */ 12:
          message.hardwareMinBrightness = reader.double();
          break;
        case /* double hardware_max_brightness */ 13:
          message.hardwareMaxBrightness = reader.double();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarBrightnessState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bool advanced_mode = 1; */
    if (message.advancedMode !== false) writer.tag(1, WireType.Varint).bool(message.advancedMode);
    /* double brightness = 2; */
    if (message.brightness !== 0) writer.tag(2, WireType.Bit64).double(message.brightness);
    /* double hardware_brightness = 3; */
    if (message.hardwareBrightness !== 0)
      writer.tag(3, WireType.Bit64).double(message.hardwareBrightness);
    /* double software_brightness = 4; */
    if (message.softwareBrightness !== 0)
      writer.tag(4, WireType.Bit64).double(message.softwareBrightness);
    /* bool brightness_transitioning = 5; */
    if (message.brightnessTransitioning !== false)
      writer.tag(5, WireType.Varint).bool(message.brightnessTransitioning);
    /* bool hardware_brightness_transitioning = 6; */
    if (message.hardwareBrightnessTransitioning !== false)
      writer.tag(6, WireType.Varint).bool(message.hardwareBrightnessTransitioning);
    /* bool software_brightness_transitioning = 7; */
    if (message.softwareBrightnessTransitioning !== false)
      writer.tag(7, WireType.Varint).bool(message.softwareBrightnessTransitioning);
    /* double brightness_transition_target = 8; */
    if (message.brightnessTransitionTarget !== 0)
      writer.tag(8, WireType.Bit64).double(message.brightnessTransitionTarget);
    /* double hardware_brightness_transition_target = 9; */
    if (message.hardwareBrightnessTransitionTarget !== 0)
      writer.tag(9, WireType.Bit64).double(message.hardwareBrightnessTransitionTarget);
    /* double software_brightness_transition_target = 10; */
    if (message.softwareBrightnessTransitionTarget !== 0)
      writer.tag(10, WireType.Bit64).double(message.softwareBrightnessTransitionTarget);
    /* bool hardware_brightness_available = 11; */
    if (message.hardwareBrightnessAvailable !== false)
      writer.tag(11, WireType.Varint).bool(message.hardwareBrightnessAvailable);
    /* double hardware_min_brightness = 12; */
    if (message.hardwareMinBrightness !== 0)
      writer.tag(12, WireType.Bit64).double(message.hardwareMinBrightness);
    /* double hardware_max_brightness = 13; */
    if (message.hardwareMaxBrightness !== 0)
      writer.tag(13, WireType.Bit64).double(message.hardwareMaxBrightness);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarBrightnessState
 */
export const OyasumiSidecarBrightnessState = new OyasumiSidecarBrightnessState$Type();
/**
 * @generated ServiceType for protobuf service OyasumiOverlaySidecar.OyasumiOverlaySidecar
 */
export const OyasumiOverlaySidecar = new ServiceType(
  'OyasumiOverlaySidecar.OyasumiOverlaySidecar',
  [
    { name: 'AddNotification', options: {}, I: AddNotificationRequest, O: AddNotificationResponse },
    { name: 'ClearNotification', options: {}, I: ClearNotificationRequest, O: Empty },
    { name: 'SyncState', options: {}, I: OyasumiSidecarState, O: Empty },
    { name: 'SetDebugTranslations', options: {}, I: SetDebugTranslationsRequest, O: Empty },
    { name: 'OpenOverlayMenu', options: {}, I: OverlayMenuOpenRequest, O: Empty },
    { name: 'CloseOverlayMenu', options: {}, I: Empty, O: Empty },
    { name: 'ToggleOverlayMenu', options: {}, I: OverlayMenuOpenRequest, O: Empty },
    { name: 'SetMicrophoneActive', options: {}, I: SetMicrophoneActiveRequest, O: Empty },
  ]
);
