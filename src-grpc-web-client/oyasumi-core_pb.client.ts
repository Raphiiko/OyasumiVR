// @generated by protobuf-ts 2.9.0 with parameter add_pb_suffix,force_server_none
// @generated from protobuf file "oyasumi-core.proto" (package "OyasumiCore", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { OyasumiCore } from './oyasumi-core_pb';
import type { SetAddressRequest } from './oyasumi-core_pb';
import type { AddNotificationResponse } from './oyasumi-core_pb';
import type { AddNotificationRequest } from './oyasumi-core_pb';
import type { HTTPServerPort } from './oyasumi-core_pb';
import type { EventParams } from './oyasumi-core_pb';
import type { MDNSSidecarStartArgs } from './oyasumi-core_pb';
import type { ElevatedSidecarStartArgs } from './oyasumi-core_pb';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { Empty } from './oyasumi-core_pb';
import type { OverlaySidecarStartArgs } from './oyasumi-core_pb';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service OyasumiCore.OyasumiCore
 */
export interface IOyasumiCoreClient {
  /**
   * @generated from protobuf rpc: OnOverlaySidecarStart(OyasumiCore.OverlaySidecarStartArgs) returns (OyasumiCore.Empty);
   */
  onOverlaySidecarStart(
    input: OverlaySidecarStartArgs,
    options?: RpcOptions
  ): UnaryCall<OverlaySidecarStartArgs, Empty>;
  /**
   * @generated from protobuf rpc: OnElevatedSidecarStart(OyasumiCore.ElevatedSidecarStartArgs) returns (OyasumiCore.Empty);
   */
  onElevatedSidecarStart(
    input: ElevatedSidecarStartArgs,
    options?: RpcOptions
  ): UnaryCall<ElevatedSidecarStartArgs, Empty>;
  /**
   * @generated from protobuf rpc: OnMDNSSidecarStart(OyasumiCore.MDNSSidecarStartArgs) returns (OyasumiCore.Empty);
   */
  onMDNSSidecarStart(
    input: MDNSSidecarStartArgs,
    options?: RpcOptions
  ): UnaryCall<MDNSSidecarStartArgs, Empty>;
  /**
   * @generated from protobuf rpc: SendEvent(OyasumiCore.EventParams) returns (OyasumiCore.Empty);
   */
  sendEvent(input: EventParams, options?: RpcOptions): UnaryCall<EventParams, Empty>;
  /**
   * @generated from protobuf rpc: GetHTTPServerPort(OyasumiCore.Empty) returns (OyasumiCore.HTTPServerPort);
   */
  getHTTPServerPort(input: Empty, options?: RpcOptions): UnaryCall<Empty, HTTPServerPort>;
  /**
   * @generated from protobuf rpc: AddNotification(OyasumiCore.AddNotificationRequest) returns (OyasumiCore.AddNotificationResponse);
   */
  addNotification(
    input: AddNotificationRequest,
    options?: RpcOptions
  ): UnaryCall<AddNotificationRequest, AddNotificationResponse>;
  /**
   * @generated from protobuf rpc: SetVRChatOSCAddress(OyasumiCore.SetAddressRequest) returns (OyasumiCore.Empty);
   */
  setVRChatOSCAddress(
    input: SetAddressRequest,
    options?: RpcOptions
  ): UnaryCall<SetAddressRequest, Empty>;
  /**
   * @generated from protobuf rpc: SetVRChatOSCQueryAddress(OyasumiCore.SetAddressRequest) returns (OyasumiCore.Empty);
   */
  setVRChatOSCQueryAddress(
    input: SetAddressRequest,
    options?: RpcOptions
  ): UnaryCall<SetAddressRequest, Empty>;
}
/**
 * @generated from protobuf service OyasumiCore.OyasumiCore
 */
export class OyasumiCoreClient implements IOyasumiCoreClient, ServiceInfo {
  typeName = OyasumiCore.typeName;
  methods = OyasumiCore.methods;
  options = OyasumiCore.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: OnOverlaySidecarStart(OyasumiCore.OverlaySidecarStartArgs) returns (OyasumiCore.Empty);
   */
  onOverlaySidecarStart(
    input: OverlaySidecarStartArgs,
    options?: RpcOptions
  ): UnaryCall<OverlaySidecarStartArgs, Empty> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<OverlaySidecarStartArgs, Empty>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: OnElevatedSidecarStart(OyasumiCore.ElevatedSidecarStartArgs) returns (OyasumiCore.Empty);
   */
  onElevatedSidecarStart(
    input: ElevatedSidecarStartArgs,
    options?: RpcOptions
  ): UnaryCall<ElevatedSidecarStartArgs, Empty> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ElevatedSidecarStartArgs, Empty>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: OnMDNSSidecarStart(OyasumiCore.MDNSSidecarStartArgs) returns (OyasumiCore.Empty);
   */
  onMDNSSidecarStart(
    input: MDNSSidecarStartArgs,
    options?: RpcOptions
  ): UnaryCall<MDNSSidecarStartArgs, Empty> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<MDNSSidecarStartArgs, Empty>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: SendEvent(OyasumiCore.EventParams) returns (OyasumiCore.Empty);
   */
  sendEvent(input: EventParams, options?: RpcOptions): UnaryCall<EventParams, Empty> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<EventParams, Empty>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: GetHTTPServerPort(OyasumiCore.Empty) returns (OyasumiCore.HTTPServerPort);
   */
  getHTTPServerPort(input: Empty, options?: RpcOptions): UnaryCall<Empty, HTTPServerPort> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Empty, HTTPServerPort>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: AddNotification(OyasumiCore.AddNotificationRequest) returns (OyasumiCore.AddNotificationResponse);
   */
  addNotification(
    input: AddNotificationRequest,
    options?: RpcOptions
  ): UnaryCall<AddNotificationRequest, AddNotificationResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<AddNotificationRequest, AddNotificationResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: SetVRChatOSCAddress(OyasumiCore.SetAddressRequest) returns (OyasumiCore.Empty);
   */
  setVRChatOSCAddress(
    input: SetAddressRequest,
    options?: RpcOptions
  ): UnaryCall<SetAddressRequest, Empty> {
    const method = this.methods[6],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SetAddressRequest, Empty>('unary', this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: SetVRChatOSCQueryAddress(OyasumiCore.SetAddressRequest) returns (OyasumiCore.Empty);
   */
  setVRChatOSCQueryAddress(
    input: SetAddressRequest,
    options?: RpcOptions
  ): UnaryCall<SetAddressRequest, Empty> {
    const method = this.methods[7],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SetAddressRequest, Empty>('unary', this._transport, method, opt, input);
  }
}
