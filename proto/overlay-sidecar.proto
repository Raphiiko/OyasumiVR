syntax = "proto3";

option csharp_namespace = "GrcpOverlaySidecar";

package OyasumiOverlaySidecar;

service OyasumiOverlaySidecar {
  rpc AddNotification (AddNotificationRequest) returns (AddNotificationResponse) {}
  rpc ClearNotification (ClearNotificationRequest) returns (Empty) {}
  rpc SyncState (OyasumiSidecarState) returns (Empty) {}
  rpc SetDebugTranslations(SetDebugTranslationsRequest) returns (Empty) {}
  rpc OpenOverlayMenu(OverlayMenuOpenRequest) returns (Empty) {}
  rpc CloseOverlayMenu(Empty) returns (Empty) {}
  rpc ToggleOverlayMenu(OverlayMenuOpenRequest) returns (Empty) {}
  rpc SetMicrophoneActive(SetMicrophoneActiveRequest) returns (Empty) {}
}

// Requests & Responses
message AddNotificationRequest {
  string message = 1;
  uint32 duration = 2;
}

message AddNotificationResponse {
  optional string notification_id = 1;
}

message ClearNotificationRequest {
  string notification_id = 1;
}

message SetDebugTranslationsRequest {
  string translations = 1;
}

message OverlayMenuOpenRequest {
  OyasumiSidecarControllerRole controller_role = 1;
}

message SetMicrophoneActiveRequest {
  bool active = 1;
  MicrophoneActivityMode mode = 2;
}

message Empty {

}

message OyasumiSidecarState {
  bool sleep_mode = 1;
  VrcStatus vrc_status = 2;
  string vrc_username = 3;
  OyasumiSidecarAutomationsState automations = 4;
  string locale = 5;
  OyasumiSidecarDeviceInfo device_info = 6;
  OyasumiSidecarOverlaySettings settings = 7;
  OyasumiSidecarBrightnessState brightness_state = 8;
  bool sleep_preparation_available = 9;
  bool sleep_preparation_timed_out = 10;
  bool system_mic_muted = 11;
}

// No longer required, but reserved for future settings
message OyasumiSidecarOverlaySettings {
  bool system_mic_indicator_enabled = 1;
  double system_mic_indicator_opacity = 2;
  bool system_mic_indicator_fadeout = 3;
  MicrophoneActivityMode system_mic_indicator_voice_activation_mode = 12;
}

message OyasumiSidecarDeviceInfo {
  repeated OyasumiSidecarDeviceInfo_Controller controllers = 1;
  repeated OyasumiSidecarDeviceInfo_Tracker trackers = 2;
}

message OyasumiSidecarDeviceInfo_Controller {
  int32 index = 1;
  string manufacturer_name = 2;
  string model_number = 3;
  string serial_number = 4;
  string hardware_revision = 5;
  string dongle_id = 6;
  double battery = 7;
  bool is_turning_off = 8;
  bool can_power_off = 9;
  bool is_charging = 10;
  bool provides_battery_status = 11;
}

message OyasumiSidecarDeviceInfo_Tracker {
  int32 index = 1;
  string manufacturer_name = 2;
  string model_number = 3;
  string serial_number = 4;
  string hardware_revision = 5;
  string dongle_id = 6;
  double battery = 7;
  bool is_turning_off = 8;
  bool can_power_off = 9;
  bool is_charging = 10;
  bool provides_battery_status = 11;
}

message OyasumiSidecarAutomationsState {
  OyasumiSidecarAutomationsState_AutoAcceptInviteRequests autoAcceptInviteRequests = 1;
  OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount changeStatusBasedOnPlayerCount = 2;
  OyasumiSidecarAutomationsState_SleepingAnimations sleepingAnimations = 3;
  OyasumiSidecarAutomationsState_ShutdownAutomations shutdownAutomations = 4;
  OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector sleepModeEnableForSleepDetector = 5;
}

message OyasumiSidecarAutomationsState_AutoAcceptInviteRequests {
  bool enabled = 1;
  OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode mode = 2;
  uint32 player_count = 3;
}

message OyasumiSidecarAutomationsState_ChangeStatusBasedOnPlayerCount {
  bool enabled = 1;
  uint32 threshold = 2;
}

message OyasumiSidecarAutomationsState_SleepingAnimations {
  bool enabled = 1;
  string preset_name = 2;
}

message OyasumiSidecarAutomationsState_ShutdownAutomations {
  bool triggers_enabled = 1;
  bool running = 2;
  bool can_start = 3;
  uint32 triggers_configured = 4;
}

message OyasumiSidecarAutomationsState_SleepModeEnableForSleepDetector {
  bool enabled = 1;
  string sensitivity = 2;
  bool activation_window = 3;
  repeated uint32 activation_window_start = 4;
  repeated uint32 activation_window_end = 5;
}

enum OyasumiSidecarAutomationsState_AutoAcceptInviteRequests_Mode {
  OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_Disabled = 0;
  OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_Whitelist = 1;
  OYASUMI_SIDECAR_AUTOMATIONS_STATE__AUTO_ACCEPT_INVITE_REQUESTS__MODE_Blacklist = 2;
}

message OyasumiSidecarBrightnessState {
  bool advanced_mode = 1;
  double brightness = 2;
  double hardware_brightness = 3;
  double software_brightness = 4;
  bool brightness_transitioning = 5;
  bool hardware_brightness_transitioning = 6;
  bool software_brightness_transitioning = 7;
  double brightness_transition_target = 8;
  double hardware_brightness_transition_target = 9;
  double software_brightness_transition_target = 10;
  bool hardware_brightness_available = 11;
  double hardware_min_brightness = 12;
  double hardware_max_brightness = 13;
}

enum VrcStatus {
  VRC_STATUS_Offline = 0;
  VRC_STATUS_Busy = 1;
  VRC_STATUS_AskMe = 2;
  VRC_STATUS_Active = 3;
  VRC_STATUS_JoinMe = 4;
}

enum OyasumiSidecarControllerRole {
  OYASUMI_SIDECAR_CONTROLLER_ROLE_Left = 0;
  OYASUMI_SIDECAR_CONTROLLER_ROLE_Right = 1;
}

enum MicrophoneActivityMode {
  MICROPHONE_ACTIVITY_MODE_Hardware = 0;
  MICROPHONE_ACTIVITY_MODE_VRChat = 1;
}

